// [Flutter] Dart 언어 기본 문법 #02 - 익명 함수와 람다식
// Dart 언어에서 익명 함수와 람다식은 유사한 기능을 제공하지만, 문법적으로나 사용 편의성에서 차이가 있습니다.
// 이를 이해하기 위해 Dart의 익명 함수 정의에서 람다식으로 넘어가는 과정을 단계별로 살펴보겠습니다.

void main() {
  // Ⅰ 익명 함수
  // 01. 익명 함수의 정의
  // 익명 함수는 이름이 없는 함수로, 특정 로직을 일회성으로 정의하고 실행할 때 유용합니다.
  (int a, int b) {
    return a * b;
  };

  // 02. 익명 함수의 타입 생략
  // Dart에서는 타입 추론을 지원하므로, 매개변수 타입을 생략할 수 있습니다.
  // Dart가 a와 b의 타입을 실행 문맥에 따라 자동으로 추론
  // 타입을 생략해 코드가 간결해짐
  (a, b) {
    return a * b;
  };

  // 03. 익명 함수를 변수에 할당
  // 익명 함수는 변수에 할당하여 재사용할 수 있습니다.
  // 이때 변수의 타입을 명시적으로 지정하거나 생략할 수 있습니다.

  // 타입 명시
  Function(int, int) ex1 = (int a, int b) {
    return a * b;
  };

  // 타입 생략
  var ex2 = (a, b) {
    return a * b;
  };
}
